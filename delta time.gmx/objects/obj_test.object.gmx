<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create

//Set delta time properties
dt_default_room_speed = 30;
dt_factor = 1;
dt_time = get_timer();
dt_last_update = get_timer();

//Set physics properties
accel_x = 0;
accel_y = 0;
veloc_x = 0;
veloc_y = 0;

//Set test values. We expect to move ~400 pixels
test_juju = true;
test_nudge_length = 10; //Frames
test_accel = 4;
test_drag = 0.9048;

//Set nudge tracking variables
nudge_start_x = x;
nudge_start_y = y;
nudge_start_time = 0;
nudge_direction = 0;
nudge_clicked = false;
nudge_do = false;
nudge_cumulative = test_nudge_length;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Step - Switching

if ( keyboard_check_pressed( vk_space ) ) {
    
    switch( room_speed ) {
        case  30: room_speed =   60; break;
        case  60: room_speed =  120; break;
        case 120: room_speed =  144; break;
        case 144: room_speed = 9999; break;
        default : room_speed =   30; break;
    }
    
} else if ( keyboard_check_pressed( ord( "J" ) ) ) {
    
    test_juju = !test_juju;
    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Step - Delta Time

dt_time = get_timer();
dt_factor = dt_default_room_speed * ( dt_time - dt_last_update ) / 1000000;
dt_last_update = dt_time;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Step - Nudge
//This block of code handles a "nudge" to the object by applying acceleration over a certain period of time
//Since this is tied to counting in frames (by virtue of this code being called once a frame), we need to do clever things to ensure accuracy

if ( mouse_check_button_pressed( mb_left ) ) {
    
    //Set nudge properties
    nudge_start_x = x;
    nudge_start_y = y;
    nudge_start_time = dt_time;
    nudge_direction = point_direction( x, y, mouse_x, mouse_y );
    nudge_clicked = true;
    nudge_do = true;
    nudge_cumulative = 0;
    
    //Reset the physics so every is test is the same
    accel_x = 0;
    accel_y = 0;
    veloc_x = 0;
    veloc_y = 0;
    
}

//Do the nudging
if ( nudge_cumulative &lt; test_nudge_length ) {
    
    //This is some special code to make sure each nudge is exactly the same length and strength regardless of framerate
    var _incr = min( dt_factor, test_nudge_length - nudge_cumulative ) / dt_factor;
    nudge_cumulative += _incr * dt_factor;
    
    accel_x = lengthdir_x( test_accel * _incr, nudge_direction );
    accel_y = lengthdir_y( test_accel * _incr, nudge_direction );
    
    //...normally you'd have some code that looks like this (and would be sufficient in a normal game)
    //accel_x = lengthdir_x( test_accel, nudge_direction );
    //accel_y = lengthdir_y( test_accel, nudge_direction );
    
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Step - Physics

if ( test_juju ) {
    
    //Handle first and second time derivatives (velocity and acceleration)
    //This is derived from position(t) = position(0) + velocity.t + 1/2.acceleration.t^2
    x += veloc_x * dt_factor + 0.5 * accel_x * dt_factor * dt_factor;
    y += veloc_y * dt_factor + 0.5 * accel_y * dt_factor * dt_factor;
    veloc_x += accel_x * dt_factor;
    veloc_y += accel_y * dt_factor;
    
    //Handle drag force
    veloc_x *= power( test_drag, dt_factor );
    veloc_y *= power( test_drag, dt_factor );
    if ( abs( veloc_x ) &lt; 0.01 ) and ( abs( veloc_y ) &lt; 0.01 ) {
        veloc_x = 0;
        veloc_y = 0;
    }

} else { //What follows is the common, and wrong, way to try to use delta time
    
    //Handle velocity and acceleration
    veloc_x += accel_x * dt_factor;
    veloc_y += accel_y * dt_factor;
    x += veloc_x * dt_factor;
    y += veloc_y * dt_factor;
    
    //Handle drag force
    //A particularly silly answer is to use straight-up multiplication...
    //veloc_x *= test_drag * dt_factor;
    //veloc_y *= test_drag * dt_factor;
    
    //...but let's assume we're not being silly
    veloc_x *= power( test_drag, dt_factor );
    veloc_y *= power( test_drag, dt_factor );
    if ( abs( veloc_x ) &lt; 0.01 ) and ( abs( veloc_y ) &lt; 0.01 ) {
        veloc_x = 0;
        veloc_y = 0;
    }
    
}

//Reset acceleration every frame
accel_x = 0;
accel_y = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw GUI

var _str = "Delta Time Example#";
_str += "@jujuadams#";
_str += "2016/10/04##";
_str += "Press space to change room_speed#";
_str += "Press J to change delta time method#";
_str += "Left click to nudge object##";
if ( test_juju ) _str += "[Proper delta time]##" else _str += "[Basic delta time]##";
_str += "room_speed = " + string( room_speed ) + "#";
_str += "fps = " + string( fps ) + "##";
_str += "nudge distance = " + string( point_distance( nudge_start_x, nudge_start_y, x, y ) ) + "#";

draw_text( 5, 5, _str );
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw

draw_circle( x, y, 10, false );
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
